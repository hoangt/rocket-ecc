# In at attempt to write portable code I've gone ahead and attempted
# to get GCC to warn me whenever possible.
LANGUAGES   += c++
COMPILEOPTS += -Wall
COMPILEOPTS += -Werror
COMPILEOPTS += -Wextra
COMPILEOPTS += -ansi
COMPILEOPTS += -pedantic

# The test harnesses are written (at least partially) in bash
LANGUAGES   += bash

# It seems that either Spike or the proxy kernel spits out some junk
# when I try and run tests.  This attempts to seperate the actual
# tests from that output by writing a number of newlines.
LANGUAGES   += c++
COMPILEOPTS += -DTEST_NEWLINE_COUNT=20

# We use Chisel to build our hardware, and Scala to build the
# cryptography library.  Note that this is a bit hacky because it
# depends on Chisel to defer to Scala for libraries.
LANGUAGES   += scala

LANGUAGES   += chisel
COMPILEOPTS += `ppkg-config chisel --cflags`
COMPILEOPTS += -Wno-all

##############################################################################
# Chisel RTL Unit Tests                                                      #
##############################################################################
LANGUAGES   += c++
COMPILER     = g++
LINKER       = g++
COMPILEOPTS += `ppkg-config chisel --cflags`

# Install a Chisel library, which is really just a Scala JAR
LIBRARIES   += libchiselcrypt.jar
COMPILEOPTS += `ppkg-config chisel --libs`
LINKOPTS    += `ppkg-config chisel --libs`
SOURCES     += chiselcrypt/library.scala

# Some arithmetic tests for the BigInt
BINARIES    += rtlunit-bigint
COMPILEOPTS += -Isrc/shim
COMPILEOPTS += -DBIGINT_TEST_HARNESS
COMPILEOPTS += -DBIGINT_TEST_BIT_LENGTH=256
SOURCES     += rtlunit/bigint/main.scala
COMPILEOPTS += -dBigIntHarness
DEPLIBS     += chiselcrypt
SOURCES     += rtlunit/bigint/redirect.c++
CONFIG      += testbigint

# Some arithmetic tests for the ModInt
BINARIES    += rtlunit-modint
COMPILEOPTS += -Isrc/shim
COMPILEOPTS += -DMODINT_TEST_HARNESS
COMPILEOPTS += -DMODINT_TEST_BIT_LENGTH=256
SOURCES     += rtlunit/modint/main.scala
COMPILEOPTS += -dModIntHarness
DEPLIBS     += chiselcrypt
SOURCES     += rtlunit/modint/redirect.c++
CONFIG      += testmodint

##############################################################################
# RISC-V Tests                                                               #
##############################################################################
LANGUAGES += c++
COMPILER   = riscv-elf-g++
LINKER     = riscv-elf-g++

# Some arithmetic tests for the BigInt
BINARIES    += riscv-bigint
COMPILEOPTS += -DBIGINT_TEST_HARNESS
COMPILEOPTS += -DBIGINT_TEST_BIT_LENGTH=256
SOURCES     += shim/bigint.c++
CONFIG      += testbigint

# Some arithmetic tests for the ModInt
BINARIES    += riscv-modint
COMPILEOPTS += -DMODINT_TEST_HARNESS
COMPILEOPTS += -DMODINT_TEST_BIT_LENGTH=256
SOURCES     += shim/modint.c++
CONFIG      += testmodint

# NIST published point test cases
BINARIES    += riscv-point
COMPILEOPTS += -DPOINT_TEST_HARNESS
SOURCES     += shim/point.c++
CONFIG      += testpoint

##############################################################################
# x86 Tests                                                                  #
##############################################################################
LANGUAGES += c++
COMPILER   = g++
LINKER     = g++

# Some arithmetic tests for the BigInt
BINARIES    += bigint
COMPILEOPTS += -DBIGINT_TEST_HARNESS
COMPILEOPTS += -DBIGINT_TEST_BIT_LENGTH=256
SOURCES     += shim/bigint.c++
CONFIG      += testbigint

# Some arithmetic tests for the ModInt
BINARIES    += modint
COMPILEOPTS += -DMODINT_TEST_HARNESS
COMPILEOPTS += -DMODINT_TEST_BIT_LENGTH=256
SOURCES     += shim/modint.c++
CONFIG      += testmodint

# NIST published point test cases
BINARIES    += point
COMPILEOPTS += -DPOINT_TEST_HARNESS
SOURCES     += shim/point.c++
CONFIG      += testpoint

# The end goal of this project: stand-along signature and verification
# binaries.
BINARIES    += sign
SOURCES     += shim/sign.c++
CONFIG      += testdb

##############################################################################
# OpenSSL Tests                                                              #
##############################################################################
LANGUAGES += c++
COMPILER   = g++
LINKER     = g++

# The remaining tests use OpenSSL to verify that all the crypto code I
# wrote is actually somewhat sane.
LANGUAGES   += c++
COMPILEOPTS += `ppkg-config --have OPENSSL libssl libcrypto --cflags`
LINKOPTS    += `ppkg-config --have OPENSSL libssl libcrypto --libs`
LINKOPTS    += -ldl
COMPILEOPTS += -Wno-deprecated-declarations

BINARIES    += openssl-genkey
SOURCES     += shim/openssl-genkey.c++
TESTSRC     += simple.bash

BINARIES    += openssl-sign
SOURCES     += shim/openssl-sign.c++
CONFIG      += testdb

BINARIES    += openssl-verify
SOURCES     += shim/openssl-verify.c++
CONFIG      += testdb
